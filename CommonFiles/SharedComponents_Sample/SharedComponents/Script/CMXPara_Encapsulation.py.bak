ModelPath = r"C:\WorkingFolder\testCase\testModel"
sec = 1000


class TabFlowCure:

    def __init__(self):
        Aliases.MDXProject.wndCMX.SysTabControl32.ClickTab("Fill/Cure")

    def Set_Solver(Self, Solver):
        Aliases.MDXProject.wndCMX.pageFlowPack.Solver.ClickItem(Solver)

    def Set_Analysis(self, AnalysisType):
        dicAnalysis = {
            "Standard": lambda: Aliases.MDXProject.wndCMX.pageFlowPack.Customize.ClickButton(),
            "Fast": lambda: Aliases.MDXProject.wndCMX.pageFlowPack.FastAnalysis.ClickButton(),
            "Customize": lambda: Aliases.MDXProject.wndCMX.pageFlowPack.FastAnalysis.ClickButton()
        }.get(AnalysisType)()

    def Set_Thickness(self, Thickness):
        Aliases.MDXProject.wndCMX.pageFlowPack.Thickness.SetText(Thickness)

    def Set_TimeStep(self, **dicType):
        def Action():
            Aliases.MDXProject.dlgDataEditor.SysListView32.ClickItem(
                "%s Analysis [0~%s] sec" % (str(Type), str(tTotal)), "3")
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.SetText(
                str(ts))
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.Keys("[Enter]")
        Aliases.MDXProject.wndCMX.pageFlowPack.SysListView32.ClickItem(
            "Setting Method: Filling Time (sec)", 0)
        Aliases.MDXProject.wndCMX.pageFlowPack.SysListView32.btnEdit.ClickButton()
        tupParaKey = ("Filling", "Curing")
        for k in tupParaKey:
            l = dicType.get(k)
            Log.Message(l)
            if l != None:
                Type = k
                tTotal = dicType[k][0]
                ts = dicType[k][1]
                Action()
        Aliases.MDXProject.dlgDataEditor.btn_OK.ClickButton()


class TabCool:

    def __init__(self):
        Aliases.MDXProject.wndCMX.SysTabControl32.ClickTab("Cool")

    def Set_TimeStep(self, **dicType):
        def Action():
            Type_space = aqString.Replace(Type, "_", " ")
            Aliases.MDXProject.wndCMX.pageCool.SysListView32.ClickItem(
                "%s :  3" % str(Type_space), 0)
            Aliases.MDXProject.wndCMX.pageCool.SysListView32.btnEdit.ClickButton()
            Aliases.MDXProject.dlgDataEditor.SysListView32.ClickItem(
                "%s [0~%s] sec" % (str(Type_space), str(tTotal)), "3")
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.SetText(
                str(ts))
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.Keys("[Enter]")
            Aliases.MDXProject.dlgDataEditor.btn_OK.ClickButton()
        tupParaKey = ("Cooling", "Opening", "Mold_preheating")
        for k in tupParaKey:
            l = dicType.get(k)
            Log.Message(l)
            if l != None:
                Type = k
                tTotal = dicType[k][0]
                ts = dicType[k][1]
                Action()

    def Set_Solver(self, iMaxCyc=10, Criteria="Maximum variation of mold temperature", StdValue=["ByTempDiff", 1]):
        Aliases.MDXProject.wndCMX.pageCool.SysListView32.ClickItem(
            "Solver parameters*", 0)
        Aliases.MDXProject.wndCMX.pageCool.SysListView32.btn_Edit.ClickButton()
        Aliases.MDXProject.dlgDataEditor.MaxCyc.SetText(str(iMaxCyc))
        Aliases.MDXProject.dlgDataEditor.CriteriaList.ClickItem(Criteria)
        if StdValue[0] == "ByTempDiff":
            Aliases.MDXProject.dlgDataEditor.ByTempDiff.ClickButton()
            Aliases.MDXProject.dlgDataEditor.DiffValue.SetText(
                str(StdValue[1]))
        elif StdValue[0] == "ByTempDiffRatio":
            Aliases.MDXProject.dlgDataEditor.ByTempDiffRatio.ClickButton()
            Aliases.MDXProject.dlgDataEditor.DiffRatioValue.SetText(
                str(StdValue[1]))
        Aliases.MDXProject.dlgDataEditor.btn_OK.ClickButton()

    def Set_3DCool(self, Switch, method):
        if Switch == 1:
            Aliases.MDXProject.wndCMX.pageCool.CoolingChannelAnalysisBy.ClickButton(
                cbChecked)
            Aliases.MDXProject.wndCMX.pageCool.CoolingChannelAnalysisMethod.ClickItem(
                method)


class TabWarp:

    def __init__(self):
        Aliases.MDXProject.wndCMX.SysTabControl32.ClickTab("Warp")


class TabEncapsulation:
    def __init__(self, Solver="Moldex3D"):
        Aliases.MDXProject.wndCMX.SysTabControl32.ClickTab("Encapsulation")
        Aliases.MDXProject.wndCMX.pageEncapsulation.Solver.ClickItem(Solver)

    def Set_TimeStep(self, **dicType):
        def Action():
            Type_space = aqString.Replace(Type, "_", " ")
            Aliases.MDXProject.wndCMX.pageEncapsulation.SysListView32.ClickItem(pos, 1)
            Aliases.MDXProject.wndCMX.pageEncapsulation.SysListView32.btn_Edit.ClickButton()
            Aliases.MDXProject.dlgDataEditor.SysListView32.ClickItem("%s [0~%s] sec" % (str(Type_space), str(tTotal)), "3")
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.SetText(str(ts))
            Aliases.MDXProject.dlgDataEditor.SysListView32.Edit.Keys("[Enter]")
            Aliases.MDXProject.dlgDataEditor.btn_OK.ClickButton()
        
        tupParaKey = ("Wire_sweep", "Paddle_shift", "NULL")
        for k in tupParaKey:
            l = dicType.get(k)
            # Log.Message(l)
            if l != None:
                Type = k
                pos = dicType[k][0]
                tTotal = dicType[k][1]
                ts = dicType[k][2]
                Action()

    def Set_ClickItem(self, itemName, itemVal):
        Aliases.MDXProject.wndCMX.pageEncapsulation.SysListView32.ClickItem(itemName[0], itemName[1])
        Aliases.MDXProject.wndCMX.pageEncapsulation.SysListView32.ComboBox.ClickItem(itemVal)


class TabTask:
    def __init__(self):
        Aliases.MDXProject.wndCMX.SysTabControl32.ClickTab("Task Manager")

    def Set_TaskNo(self, numCPU):
        Aliases.MDXProject.wndCMX.pageTask.No.SetText(str(numCPU))
